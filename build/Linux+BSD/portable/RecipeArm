#!/bin/bash

# This file is designed to run in debian jessie docker images

main() {

  set -e # Halt on error
  set -x # Be verbose

  case $1 in
    "--build-only")
      shift #need to adjust parameter list so $makefile_overrides start at $1
      build "$@"
      ;;
    "--fetch-compile-dependencies-only")
      fetch-compile-dependencies
      ;;
    "--fetch-runtime-dependencies-only")
      fetch-runtime-dependencies
      ;;
    "--package-only")
      package
      ;;
    *)
      fetch-compile-dependencies
      fetch-runtime-dependencies
      build "$@"
      package
  esac

  echo 'RecipeARM completed'
}

########################################################
# Fetch dependencies only
########################################################
fetch-compile-dependencies() {
  ARCH=armhf
  echo "fetching dependencies for arm arch: $ARCH"

  `apt-key adv --fetch-keys http://emdebian.org/tools/debian/emdebian-toolchain-archive.key`
  `echo deb http://emdebian.org/tools/debian/ jessie main > /etc/apt/sources.list.d/crosstools.list`

  ` dpkg --add-architecture armhf`


  `apt-get install -y \
    libsndfile1-dev:$ARCH \
    libasound2-dev:$ARCH \
    portaudio19-dev:$ARCH \
    zlib1g-dev:$ARCH \
    libfreetype6-dev:$ARCH \
    libmp3lame-dev:$ARCH \
    libssl-dev:$ARCH \
    libdrm-dev:$ARCH \
    libgl1-mesa-dev:$ARCH \
    libpulse-dev:$ARCH \
    qtbase5-dev:$ARCH \
    qttools5-dev:$ARCH \
    qtscript5-dev:$ARCH \
    libqt5xmlpatterns5-dev:$ARCH \
    libqt5svg5-dev:$ARCH \
    libqt5webkit5-dev:$ARCH \
    qttools5-dev-tools:$ARCH `

}

fetch-runtime-dependencies() {
  echo "fetching runtime dependencies for arm arch: $1"

 qtquick1-5-dev:$ARCH
libqt5quickwidgets5:$ARCH
qml-module-qtquick-controls:$ARCH
    libicu52:$ARCH
}

########################################################
# BUILD MuseScore PORTABLE (Compile, not package)
########################################################
build() {
  echo 'building'

  cd MuseScore

  make revision

  LIBARM="/lib/arm-linux-gnueabihf" # might generalize in future to support other arms
  CMAKE_TOOLCHAIN_FILE="/MuseScore/build/Linux+BSD/jessie-crosscompile-armhf.cmake" \
  LD_LIBRARY_PATH="/usr$LIBARM:/usr$LIBARM/alsa-lib:/usr$LIBARM/pulseaudio:$LIBARM" \
  make "$@" portable
}


##########################################################################
# PACKAGE INTO APPIMAGE WITH APPIMAGEKIT
##########################################################################
package() {
  echo 'packaging'

  appdir="$(cat MuseScore/build.release/PREFIX.txt)"
  appimage="$(echo "$appdir" | sed 's|\.AppDir$|.AppImage|')"

  cd AppImageKit-5/AppImageAssistant.AppDir

  ./package  "$appdir" "$appimage"

  # allow access to AppImage from outside the chroot
  chmod a+rwx "$appimage"
  parent_dir="$(dirname "$appimage")"
  while [ "$(dirname "$parent_dir")" != "$parent_dir" ]; do
    [ "$parent_dir" == "/" ] && break
    chmod a+rwx "$parent_dir"
    parent_dir="$(dirname "$parent_dir")"
  done

  ls -lh "$appimage"

}

main "$@"
