#!/bin/bash

# This file is designed to run in debian jessie docker images

main() {

  set -e # Halt on error
  set -x # Be verbose

  case $1 in
    "--build-only")
      shift #need to adjust parameter list so $makefile_overrides start at $1
      build "$@"
      ;;
    "--package-only")
      package "$@"
      ;;
    *)
      build "$@"
      package "$@"
  esac

  echo 'RecipeARM completed'
}

########################################################
# BUILD MuseScore PORTABLE (Compile, not package)
########################################################
build() {
  echo 'building'

  cd MuseScore

  make revision

  CMAKE_TOOLCHAIN_FILE=/MuseScore/build/Linux+BSD/jessie-crosscompile-armhf.cmake \
  LD_LIBRARY_PATH=/usr/lib/arm-linux-gnueabihf:/lib/arm-linux-gnueabihf \
  make "$@" portable
}


##########################################################################
# PACKAGE INTO APPIMAGE WITH APPIMAGEKIT
##########################################################################
package() {
  echo 'packaging'

  appdir="$(cat MuseScore/build.release/PREFIX.txt)"
  appimage="$(echo "$appdir" | sed 's|\.AppDir$|.AppImage|')"

  cd AppImageKit-5/AppImageAssistant.AppDir

  ./package  "$appdir" "$appimage"

  # allow access to AppImage from outside the chroot
  chmod a+rwx "$appimage"
  parent_dir="$(dirname "$appimage")"
  while [ "$(dirname "$parent_dir")" != "$parent_dir" ]; do
    [ "$parent_dir" == "/" ] && break
    chmod a+rwx "$parent_dir"
    parent_dir="$(dirname "$parent_dir")"
  done

  ls -lh "$appimage"

}

main "$@"
